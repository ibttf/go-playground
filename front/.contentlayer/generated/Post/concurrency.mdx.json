{
  "title": "Concurrency",
  "summary": "Delve deep into Go's powerful concurrency model, exploring goroutines, channels, and advanced patterns for concurrent programming.",
  "topic": {
    "name": "Basics",
    "slug": "basics",
    "type": "NameSlugPair",
    "_raw": {}
  },
  "next": {
    "name": "Guides and Tutorials",
    "slug": "/guides/guides-tutorials",
    "type": "NameSlugPair",
    "_raw": {}
  },
  "body": {
    "raw": "\n## Goroutines\n\nConcurrency in Go is handled with goroutines â€“ lightweight, concurrent function executions. They allow multiple tasks to be processed in parallel or concurrently.\n\n### What are goroutines? How do they differ from threads?\n\nGoroutines are similar to threads, but they are more lightweight and managed by the Go runtime rather than the operating system. This design enables Go developers to spawn thousands of goroutines without the overhead commonly associated with threads.\n\nTo launch a new goroutine, simply use the **go** keyword:\n\n```go\ngo functionName()\n```\n\n### Synchronization using **sync.WaitGroup**\n\nWhile goroutines are powerful, it's essential to manage their execution. The **sync.WaitGroup** type provides a way to wait for groups of goroutines to finish executing:\n\n```go\nvar wg sync.WaitGroup\n\nwg.Add(1)\ngo func() {\n    // Do work\n    wg.Done()\n}()\nwg.Wait()\n```\n\n## Channels\n\nChannels provide a way for goroutines to communicate with each other and synchronize their execution.\n\n### Introduction to channels: make(chan T)\n\nChannels are typed conduits through which you can send and receive values. To create a channel:\n\n```go\nch := make(chan int)\n```\n\n### Sending and receiving from channels\n\nYou can send and receive values from channels using the **\\<-** operator:\n\n```go\nch <- 1  // send\nvalue := <-ch  // receive\n```\n\n### Buffered channels\n\nGo supports buffered channels. When you create a buffered channel, you specify its capacity:\n\n```go\nch := make(chan int, 2)  // capacity of 2\n```\n\n### Closing channels and range on channels\n\nIt's good practice to close channels when they're no longer needed. This can be done using the close() function. The range keyword can be used to read values from a channel until it's closed:\n\n```go\nfor v := range ch {\n    fmt.Println(v)\n}\n```\n\n## Select Statement\n\nThe select statement provides another way to handle multiple channels.\n\n### Waiting on multiple channel operations\n\nUsing select, you can wait on multiple channel operations, blocking until one of the channels can proceed:\n\n```go\nselect {\ncase msg1 := <-ch1:\n    fmt.Println(\"Received\", msg1)\ncase msg2 := <-ch2:\n    fmt.Println(\"Received\", msg2)\ncase ch3 <- 3:\n    fmt.Println(\"Sent 3 to ch3\")\ndefault:\n    fmt.Println(\"No communication\")\n}\n```\n\n### Default select case\n\nThe **default** case in a **select** is run if no other case is ready.\n\n## Advanced Concurrency Patterns\n\nGo's concurrency primitives allow for the design of intricate concurrent patterns.\n\n### Worker pools\n\nWorker pools allow you to start a fixed number of worker goroutines to handle tasks in parallel.\n\n### Fan-in, Fan-out\n\nFan-out is the practice of starting multiple goroutines to handle incoming requests, and fan-in is the practice of combining multiple results into one channel.\n\n### Timer and Ticker\n\nGo's **time** package provides **Timer** and **Ticker** for executing code after a set duration and at regular intervals, respectively.\n\n<Banner>\n  Note: Concurrency in Go is a vast topic, and understanding the intricacies of\n  goroutines, channels, and patterns can significantly enhance your Go\n  applications' efficiency. Always refer to Go's official documentation for\n  detailed explanations and best practices.\n</Banner>\n",
    "code": "var Component=(()=>{var h=Object.create;var a=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,u=Object.prototype.hasOwnProperty;var g=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),m=(l,e)=>{for(var r in e)a(l,r,{get:e[r],enumerable:!0})},s=(l,e,r,o)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let c of B(e))!u.call(l,c)&&c!==r&&a(l,c,{get:()=>e[c],enumerable:!(o=p(e,c))||o.enumerable});return l};var f=(l,e,r)=>(r=l!=null?h(y(l)):{},s(e||!l||!l.__esModule?a(r,\"default\",{value:l,enumerable:!0}):r,l)),F=l=>s(a({},\"__esModule\",{value:!0}),l);var i=g((x,t)=>{t.exports=_jsx_runtime});var w={};m(w,{default:()=>D,frontmatter:()=>A});var n=f(i()),A={title:\"Concurrency\",summary:\"Delve deep into Go's powerful concurrency model, exploring goroutines, channels, and advanced patterns for concurrent programming.\",topic:{name:\"Basics\",slug:\"basics\"},next:{name:\"Guides and Tutorials\",slug:\"/guides/guides-tutorials\"}};function d(l){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",strong:\"strong\",div:\"div\",pre:\"pre\",code:\"code\",span:\"span\"},l.components),{Banner:r}=e;return r||v(\"Banner\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:\"goroutines\",children:\"Goroutines\"}),`\n`,(0,n.jsx)(e.p,{children:\"Concurrency in Go is handled with goroutines \\u2013 lightweight, concurrent function executions. They allow multiple tasks to be processed in parallel or concurrently.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"what-are-goroutines-how-do-they-differ-from-threads\",children:\"What are goroutines? How do they differ from threads?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Goroutines are similar to threads, but they are more lightweight and managed by the Go runtime rather than the operating system. This design enables Go developers to spawn thousands of goroutines without the overhead commonly associated with threads.\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"To launch a new goroutine, simply use the \",(0,n.jsx)(e.strong,{children:\"go\"}),\" keyword:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"go\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"functionName\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"()\"})]})})})}),`\n`,(0,n.jsxs)(e.h3,{id:\"synchronization-using-syncwaitgroup\",children:[\"Synchronization using \",(0,n.jsx)(e.strong,{children:\"sync.WaitGroup\"})]}),`\n`,(0,n.jsxs)(e.p,{children:[\"While goroutines are powerful, it's essential to manage their execution. The \",(0,n.jsx)(e.strong,{children:\"sync.WaitGroup\"}),\" type provides a way to wait for groups of goroutines to finish executing:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"var\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"wg\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" sync.WaitGroup\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"wg.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Add\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"1\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"go\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// Do work\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    wg.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Done\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"()\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}()\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"wg.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Wait\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"()\"})]})]})})}),`\n`,(0,n.jsx)(e.h2,{id:\"channels\",children:\"Channels\"}),`\n`,(0,n.jsx)(e.p,{children:\"Channels provide a way for goroutines to communicate with each other and synchronize their execution.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"introduction-to-channels-makechan-t\",children:\"Introduction to channels: make(chan T)\"}),`\n`,(0,n.jsx)(e.p,{children:\"Channels are typed conduits through which you can send and receive values. To create a channel:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"ch\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"make\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"chan\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"int\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]})})})}),`\n`,(0,n.jsx)(e.h3,{id:\"sending-and-receiving-from-channels\",children:\"Sending and receiving from channels\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"You can send and receive values from channels using the \",(0,n.jsx)(e.strong,{children:\"<-\"}),\" operator:\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"ch \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"<-\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"1\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"  \"}),(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// send\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"value\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"<-\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"ch  \"}),(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// receive\"})]})]})})}),`\n`,(0,n.jsx)(e.h3,{id:\"buffered-channels\",children:\"Buffered channels\"}),`\n`,(0,n.jsx)(e.p,{children:\"Go supports buffered channels. When you create a buffered channel, you specify its capacity:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"ch\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"make\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"chan\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"int\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"2\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")  \"}),(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// capacity of 2\"})]})})})}),`\n`,(0,n.jsx)(e.h3,{id:\"closing-channels-and-range-on-channels\",children:\"Closing channels and range on channels\"}),`\n`,(0,n.jsx)(e.p,{children:\"It's good practice to close channels when they're no longer needed. This can be done using the close() function. The range keyword can be used to read values from a channel until it's closed:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"for\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"v\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"range\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" ch {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    fmt.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Println\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(v)\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.h2,{id:\"select-statement\",children:\"Select Statement\"}),`\n`,(0,n.jsx)(e.p,{children:\"The select statement provides another way to handle multiple channels.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"waiting-on-multiple-channel-operations\",children:\"Waiting on multiple channel operations\"}),`\n`,(0,n.jsx)(e.p,{children:\"Using select, you can wait on multiple channel operations, blocking until one of the channels can proceed:\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"select\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"case\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"msg1\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"<-\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"ch1:\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    fmt.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Println\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"Received\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", msg1)\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"case\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"msg2\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"<-\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"ch2:\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    fmt.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Println\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"Received\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", msg2)\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"case\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" ch3 \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"<-\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"3\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\":\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    fmt.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Println\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"Sent 3 to ch3\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"default\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\":\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    fmt.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Println\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"No communication\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.h3,{id:\"default-select-case\",children:\"Default select case\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The \",(0,n.jsx)(e.strong,{children:\"default\"}),\" case in a \",(0,n.jsx)(e.strong,{children:\"select\"}),\" is run if no other case is ready.\"]}),`\n`,(0,n.jsx)(e.h2,{id:\"advanced-concurrency-patterns\",children:\"Advanced Concurrency Patterns\"}),`\n`,(0,n.jsx)(e.p,{children:\"Go's concurrency primitives allow for the design of intricate concurrent patterns.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"worker-pools\",children:\"Worker pools\"}),`\n`,(0,n.jsx)(e.p,{children:\"Worker pools allow you to start a fixed number of worker goroutines to handle tasks in parallel.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"fan-in-fan-out\",children:\"Fan-in, Fan-out\"}),`\n`,(0,n.jsx)(e.p,{children:\"Fan-out is the practice of starting multiple goroutines to handle incoming requests, and fan-in is the practice of combining multiple results into one channel.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"timer-and-ticker\",children:\"Timer and Ticker\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"Go's \",(0,n.jsx)(e.strong,{children:\"time\"}),\" package provides \",(0,n.jsx)(e.strong,{children:\"Timer\"}),\" and \",(0,n.jsx)(e.strong,{children:\"Ticker\"}),\" for executing code after a set duration and at regular intervals, respectively.\"]}),`\n`,(0,n.jsx)(r,{children:(0,n.jsx)(e.p,{children:`Note: Concurrency in Go is a vast topic, and understanding the intricacies of\ngoroutines, channels, and patterns can significantly enhance your Go\napplications' efficiency. Always refer to Go's official documentation for\ndetailed explanations and best practices.`})})]})}function C(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,Object.assign({},l,{children:(0,n.jsx)(d,l)})):d(l)}var D=C;function v(l,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+l+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return F(w);})();\n;return Component;"
  },
  "_id": "concurrency.mdx",
  "_raw": {
    "sourceFilePath": "concurrency.mdx",
    "sourceFileName": "concurrency.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "concurrency"
  },
  "type": "Post",
  "slug": "concurrency"
}