{
  "title": "Interfaces and Methods",
  "summary": "Explore the world of Go's methods and interfaces. Understand how methods work on types, the pivotal role of interfaces, and delve into some of the standard library interfaces that Go offers.",
  "topic": {
    "name": "Basics",
    "slug": "basics",
    "type": "NameSlugPair",
    "_raw": {}
  },
  "next": {
    "name": "Concurrency in Go",
    "slug": "/basics/concurrency",
    "type": "NameSlugPair",
    "_raw": {}
  },
  "body": {
    "raw": "\n## Methods\n\nIn Go, methods are functions attached to a specific type. They allow types to exhibit behavior.\n\n### Defining Methods on Types\n\nMethods can be defined on both built-in and custom types.\n\n```go\ntype Circle struct {\n    Radius float64\n}\n\nfunc (c Circle) Area() float64 {\n    return math.Pi * c.Radius * c.Radius\n}\n```\n\n### Pointer Receivers vs. Value Receivers\n\nWhile value receivers get a copy of the type they're invoked upon, pointer receivers get a reference, allowing them to modify the original value.\n\n```go\nfunc (c *Circle) DoubleRadius() {\n    c.Radius = c.Radius * 2\n}\n```\n\n<Banner type=\"tip\">\n  Tip: Use pointer receivers when you need to modify the receiver value or when\n  the struct is large to avoid copying costs.\n</Banner>\n\n## Interfaces\n\nInterfaces abstract behavior and provide a way to express the capabilities of a type without dictating its implementation.\n\n### What are Interfaces? Why are They Crucial in Go?\n\nInterfaces allow types to be treated based on what they can do rather than what they are. They encourage a design that promotes decoupling and cleaner architecture.\n\n### Defining and Implementing Interfaces\n\nAn interface defines a set of method signatures. If a type provides definitions for all methods in the interface, it implicitly satisfies the interface.\n\n```go\ntype Speaker interface {\n    Speak() string\n}\n\ntype Person struct {\n    Name string\n}\n\nfunc (p Person) Speak() string {\n    return \"Hello, my name is \" + p.Name\n}\n```\n\n### Empty Interfaces and Type Assertions\n\nThe empty interface (interface{}) can hold values of any type, offering a way to handle unknown or dynamic types.\n\n```go\nname := person.FirstName // John\n```\n\n## Interfaces\n\nInterfaces in Go define a set of method signatures. They provide a way to specify the behavior of an object.\n\n### Defining and Implementing Interfaces\n\n```go\ntype Speaker interface {\n    Speak() string\n}\n\ntype Person struct {\n    Name string\n}\n\nfunc (p Person) Speak() string {\n    return \"Hello, my name is \" + p.Name\n}\n```\n\n### Empty Interfaces and Type Assertions\n\nThe empty interface (interface{}) can hold values of any type, offering a way to handle unknown or dynamic types.\n\n```go\nfunc Describe(i interface{}) {\n    fmt.Printf(\"(%v, %T)\\n\", i, i)\n}\n\n// Type assertion\nvalue, ok := i.(string)\n```\n\n<Banner type=\"tip\">\n  Tip: Use empty interfaces judiciously. Overuse can lead to code that's hard to\n  understand and maintain.\n</Banner>\n\n## Standard Library Interfaces\n\nGo's standard library comes with many predefined interfaces that help in designing consistent and reusable code.\n\n### io.Reader and io.Writer\n\nThe io.Reader and io.Writer interfaces are fundamental interfaces for reading from and writing to streams in Go.\n\n```go\nfunc ReadFrom(r io.Reader, buffer []byte) {\n    _, err := r.Read(buffer)\n    // Handle err\n}\n\nfunc WriteTo(w io.Writer, data []byte) {\n    _, err := w.Write(data)\n    // Handle err\n}\n```\n\n### The Stringer Interface\n\nThe Stringer interface provides a method to return the string representation of a type.\n\n```go\ntype Stringer interface {\n    String() string\n}\n```\n\n<Banner type=\"important\">\n  Note: Mastering interfaces and methods in Go is crucial as they lay the\n  foundation for Go's type system. It allows for modular and maintainable code.\n  Ensure you practice and apply these concepts in real-world scenarios.\n</Banner>\n",
    "code": "var Component=(()=>{var h=Object.create;var s=Object.defineProperty;var p=Object.getOwnPropertyDescriptor;var B=Object.getOwnPropertyNames;var y=Object.getPrototypeOf,m=Object.prototype.hasOwnProperty;var f=(l,e)=>()=>(e||l((e={exports:{}}).exports,e),e.exports),F=(l,e)=>{for(var r in e)s(l,r,{get:e[r],enumerable:!0})},i=(l,e,r,c)=>{if(e&&typeof e==\"object\"||typeof e==\"function\")for(let a of B(e))!m.call(l,a)&&a!==r&&s(l,a,{get:()=>e[a],enumerable:!(c=p(e,a))||c.enumerable});return l};var A=(l,e,r)=>(r=l!=null?h(y(l)):{},i(e||!l||!l.__esModule?s(r,\"default\",{value:l,enumerable:!0}):r,l)),g=l=>i(s({},\"__esModule\",{value:!0}),l);var t=f((b,o)=>{o.exports=_jsx_runtime});var v={};F(v,{default:()=>C,frontmatter:()=>u});var n=A(t()),u={title:\"Interfaces and Methods\",summary:\"Explore the world of Go's methods and interfaces. Understand how methods work on types, the pivotal role of interfaces, and delve into some of the standard library interfaces that Go offers.\",topic:{name:\"Basics\",slug:\"basics\"},next:{name:\"Concurrency in Go\",slug:\"/basics/concurrency\"}};function d(l){let e=Object.assign({h2:\"h2\",p:\"p\",h3:\"h3\",div:\"div\",pre:\"pre\",code:\"code\",span:\"span\"},l.components),{Banner:r}=e;return r||N(\"Banner\",!0),(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(e.h2,{id:\"methods\",children:\"Methods\"}),`\n`,(0,n.jsx)(e.p,{children:\"In Go, methods are functions attached to a specific type. They allow types to exhibit behavior.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"defining-methods-on-types\",children:\"Defining Methods on Types\"}),`\n`,(0,n.jsx)(e.p,{children:\"Methods can be defined on both built-in and custom types.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"type\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Circle\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"struct\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    Radius \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"float64\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (c Circle) \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"Area\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"float64\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" math.Pi \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"*\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" c.Radius \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"*\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" c.Radius\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.h3,{id:\"pointer-receivers-vs-value-receivers\",children:\"Pointer Receivers vs. Value Receivers\"}),`\n`,(0,n.jsx)(e.p,{children:\"While value receivers get a copy of the type they're invoked upon, pointer receivers get a reference, allowing them to modify the original value.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (c \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"*\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"Circle) \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"DoubleRadius\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"c.Radius\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" c.Radius \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"*\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"2\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(r,{type:\"tip\",children:(0,n.jsx)(e.p,{children:`Tip: Use pointer receivers when you need to modify the receiver value or when\nthe struct is large to avoid copying costs.`})}),`\n`,(0,n.jsx)(e.h2,{id:\"interfaces\",children:\"Interfaces\"}),`\n`,(0,n.jsx)(e.p,{children:\"Interfaces abstract behavior and provide a way to express the capabilities of a type without dictating its implementation.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"what-are-interfaces-why-are-they-crucial-in-go\",children:\"What are Interfaces? Why are They Crucial in Go?\"}),`\n`,(0,n.jsx)(e.p,{children:\"Interfaces allow types to be treated based on what they can do rather than what they are. They encourage a design that promotes decoupling and cleaner architecture.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"defining-and-implementing-interfaces\",children:\"Defining and Implementing Interfaces\"}),`\n`,(0,n.jsx)(e.p,{children:\"An interface defines a set of method signatures. If a type provides definitions for all methods in the interface, it implicitly satisfies the interface.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"type\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Speaker\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"interface\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Speak\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"type\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Person\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"struct\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    Name \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (p Person) \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"Speak\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"Hello, my name is \"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"+\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" p.Name\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.h3,{id:\"empty-interfaces-and-type-assertions\",children:\"Empty Interfaces and Type Assertions\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The empty interface (interface\",\") can hold values of any type, offering a way to handle unknown or dynamic types.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsx)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"name\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" person.FirstName \"}),(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// John\"})]})})})}),`\n`,(0,n.jsx)(e.h2,{id:\"interfaces-1\",children:\"Interfaces\"}),`\n`,(0,n.jsx)(e.p,{children:\"Interfaces in Go define a set of method signatures. They provide a way to specify the behavior of an object.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"defining-and-implementing-interfaces-1\",children:\"Defining and Implementing Interfaces\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"type\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Speaker\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"interface\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Speak\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"type\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Person\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"struct\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    Name \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" (p Person) \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"Speak\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"return\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"Hello, my name is \"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"+\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" p.Name\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.h3,{id:\"empty-interfaces-and-type-assertions-1\",children:\"Empty Interfaces and Type Assertions\"}),`\n`,(0,n.jsxs)(e.p,{children:[\"The empty interface (interface\",\") can hold values of any type, offering a way to handle unknown or dynamic types.\"]}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"Describe\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(i \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"interface\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"{}) {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    fmt.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Printf\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"('}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"%v\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#D19A66\"},children:\"%T\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:\")\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"\\\\n\"}),(0,n.jsx)(e.span,{style:{color:\"#98C379\"},children:'\"'}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", i, i)\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// Type assertion\"})}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"value\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"ok\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" i.(\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\")\"})]})]})})}),`\n`,(0,n.jsx)(r,{type:\"tip\",children:(0,n.jsx)(e.p,{children:`Tip: Use empty interfaces judiciously. Overuse can lead to code that's hard to\nunderstand and maintain.`})}),`\n`,(0,n.jsx)(e.h2,{id:\"standard-library-interfaces\",children:\"Standard Library Interfaces\"}),`\n`,(0,n.jsx)(e.p,{children:\"Go's standard library comes with many predefined interfaces that help in designing consistent and reusable code.\"}),`\n`,(0,n.jsx)(e.h3,{id:\"ioreader-and-iowriter\",children:\"io.Reader and io.Writer\"}),`\n`,(0,n.jsx)(e.p,{children:\"The io.Reader and io.Writer interfaces are fundamental interfaces for reading from and writing to streams in Go.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"ReadFrom\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(r io.Reader, buffer []\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"byte\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\") {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"_\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"err\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" r.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Read\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(buffer)\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// Handle err\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:\" \"}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"func\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#61AFEF\"},children:\"WriteTo\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(w io.Writer, data []\"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"byte\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\") {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"_\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\", \"}),(0,n.jsx)(e.span,{style:{color:\"#E06C75\"},children:\"err\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\":=\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" w.\"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"Write\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"(data)\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#7F848E\",fontStyle:\"italic\"},children:\"// Handle err\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(e.h3,{id:\"the-stringer-interface\",children:\"The Stringer Interface\"}),`\n`,(0,n.jsx)(e.p,{children:\"The Stringer interface provides a method to return the string representation of a type.\"}),`\n`,(0,n.jsx)(e.div,{\"data-rehype-pretty-code-fragment\":\"\",children:(0,n.jsx)(e.pre,{\"data-language\":\"go\",\"data-theme\":\"default\",children:(0,n.jsxs)(e.code,{\"data-language\":\"go\",\"data-theme\":\"default\",children:[(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"type\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#E5C07B\"},children:\"Stringer\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"interface\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\" {\"})]}),`\n`,(0,n.jsxs)(e.span,{className:\"line\",children:[(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"    \"}),(0,n.jsx)(e.span,{style:{color:\"#56B6C2\"},children:\"String\"}),(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"() \"}),(0,n.jsx)(e.span,{style:{color:\"#C678DD\"},children:\"string\"})]}),`\n`,(0,n.jsx)(e.span,{className:\"line\",children:(0,n.jsx)(e.span,{style:{color:\"#ABB2BF\"},children:\"}\"})})]})})}),`\n`,(0,n.jsx)(r,{type:\"important\",children:(0,n.jsx)(e.p,{children:`Note: Mastering interfaces and methods in Go is crucial as they lay the\nfoundation for Go's type system. It allows for modular and maintainable code.\nEnsure you practice and apply these concepts in real-world scenarios.`})})]})}function D(l={}){let{wrapper:e}=l.components||{};return e?(0,n.jsx)(e,Object.assign({},l,{children:(0,n.jsx)(d,l)})):d(l)}var C=D;function N(l,e){throw new Error(\"Expected \"+(e?\"component\":\"object\")+\" `\"+l+\"` to be defined: you likely forgot to import, pass, or provide it.\")}return g(v);})();\n;return Component;"
  },
  "_id": "interfaces-and-methods.mdx",
  "_raw": {
    "sourceFilePath": "interfaces-and-methods.mdx",
    "sourceFileName": "interfaces-and-methods.mdx",
    "sourceFileDir": ".",
    "contentType": "mdx",
    "flattenedPath": "interfaces-and-methods"
  },
  "type": "Post",
  "slug": "interfaces-and-methods"
}